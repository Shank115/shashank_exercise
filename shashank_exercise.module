<?php

/**
 * @file
 * This is a short desc.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\shashank_exercise\Event\UserLoginEvent;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\cache\CachePluginBase;


/**
 * Implements hook_form_alter().
 */
function shashank_exercise_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == "node_article_edit_form") {
    $helptext = \Drupal::configFactory()->getEditable("shashank_exercise.settings")->get("helptext");
    $node = \Drupal::routeMatch()->getParameter("node"); //type: node object
    $token_service = \Drupal::token();
    $hlptxt = $token_service->replace($helptext, ['node'=>$node], ['clear'=>TRUE]);
    $form['#prefix'] = "<span>" . $hlptxt . "</span>";
  }

  // Gets called whenever form is opened.
  // Calling service to call getName func from CustomService.php.
  $data = \Drupal::service('custom_service')->getName();
  // Prints the value provided in the config form.
  // print_r($data);

}


/**
 * Implements hook_theme().
 */
function shashank_exercise_theme($existing, $type, $theme, $path) {

  return [
  // Name for the template file (html.twig)
    'shashank_template' => [
  // Defined variables to be returned.
      'variables' => [
  // Can provide default value for markup here.
        'markup' => "",
  // Can prove default value for hexcode here.
        'hexcode' => "",
      ],
    ],
  ];

}

/**
 * @file
 * Contains custom_events.module.
 */

/**
 * Implements hook_user_login().
 */
function shashank_exercise_user_login($account) {
  // Instantiate our event.
  $event = new UserLoginEvent($account);
  // Triggering the event_dispatcher service and dispatch the event.
  $event_dispatcher = \Drupal::service('event_dispatcher');
  $event_dispatcher->dispatch($event, UserLoginEvent::EVENT_NAME);
}

/**
  * Implements hook_entity_presave().
  */

  function shashank_exercise_entity_presave(EntityInterface $entity) {
    // print_r($entity->get("title")->getValue());exit;
    $entity->set("title", "New title ");
  //exit;

}

/**
 * Implements hook_page_attachement_alter().
 */
function shashank_exercise_page_attachments_alter(array &$attachments) {
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();
  $attachments['#attached']['library'][] = 'shashank_exercise/jss_lib';
  $attachments['#attached']['drupalSettings']['shashank_exercise']['color_body'] = "testing";




  // if ($route_name === 'comment.admin') {
  //   $attachments['#attached']['library'][] = 'shashank_exercise/css_lib';

  // }
  // elseif ($route_name == 'entity.node.canonical') {
  //   $attachments['#attached']['library'][] = 'shashank_exercise/css_lib';

  // }
}

/**
 * Implements hook_entity_view_alter().
 */
function shashank_exercise_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->getEntityTypeId() == "node") {
      $build['field_tags']['#title'] = "title from view alter";//changing the title
      unset($build['field_image']);//image field is removed
      $build['markup'] = [
          '#markup' => "<h3>Hello</h3>",//static text we are adding
      ];
  }

}

/**
* Implements hook_entity_view().
*/
function shashank_exercise_entity_view(array &$build, Drupal\Core\Entity\EntityInterface $entity, Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  // condition entity type = node
  $session = \Drupal::request()->getSession();
  $counts = $session->get("shashank_exercise.node_view_count", []);
  if (!isset($counts[$entity->id()])) {
      $counts[$entity->id()] = 1;
  }
  else {
      $counts[$entity->id()]++;
  }

  $session->set("shashank_exercise.node_view_count", $counts);
  $build['count'] = [
  '#markup' => "Viewed " . $counts[$entity->id()] . " times",
  '#cache' => [
      'max-age' => 0,
  ],
];

}




/**
 * Entity view alter function.
 */
function shashank_exercise_views_pre_render(ViewExecutable $view) {
  if ($view->id() == "solr_view" && $view->getDisplay()->display['id'] == "page_1") {
    $view->element['#attached']['library'][] = "shashank_exercise/shank.js";
    $view->setTitle("Hello");
  }
}

/**
* Implements hook_views_post_render().
*/
function shashank_exercise_views_post_render(ViewExecutable $view, array &$output, CachePluginBase $cache) {
  if ($view->id() == "solr_view" && $view->getDisplay()->display['id'] == "page_1") {
    // print_r(array_keys($output['#rows'][0]['#rows'][0]));exit;
    unset($output['#rows'][0]['#rows'][0]);
    $cache->options['result_lifespan'] = 0;
    $cache->options['output_lifespan'] = 0;
  }
}



function shashank_exercise_node_presave($node) {
  print_r($node->getCacheTags());
  print_r($node->getCacheContext());
  exit;
  }